#ifndef SPACEPI_CORE_DTC_DIAGNOSTICS_DIAGNOSTIC_HPP
#define SPACEPI_CORE_DTC_DIAGNOSTICS_DIAGNOSTIC_HPP

#include <ostream>
#include <string>
#include <spacepi/dtc/diagnostics/SourceLocation.hpp>

namespace spacepi {
    namespace dtc {
        namespace diagnostics {
            /**
             * \brief Model class for a diagnostic message generated by the compiler
             */
            class Diagnostic {
                public:
                    /**
                     * \brief The severity of the Diagnostic
                     */
                    enum Severity {
                        /**
                         * \brief The Diagnostic is provided for informational purposes only
                         */
                        Info,
                        /**
                         * \brief The Diagnostic warns the user about a potential problem
                         */
                        Warning,
                        /**
                         * \brief The Diagnostic informs the user that there was an error processing
                         */
                        Error
                    };

                    /**
                     * \brief Constructs a Diagnostic
                     *
                     * \param[in] severity The severity of the Diagnostic
                     * \param[in] message A descriptive message about the problem
                     * \param[in] location The SourceLocation which contains the problem
                     */
                    Diagnostic(Severity severity, const std::string &message, const SourceLocation &location = SourceLocation()) noexcept;

                    /**
                     * \brief Checks for equality
                     *
                     * \param[in] other The other object
                     * \return The equality result
                     */
                    bool operator==(const Diagnostic &other) const noexcept;

                    /**
                     * \brief Checks for equality
                     *
                     * \param[in] other The other object
                     * \return The equality result
                     */
                    bool operator!=(const Diagnostic &other) const noexcept;

                    /**
                     * \brief Gets the severity of the Diagnostic
                     *
                     * \return The severity
                     */
                    Severity getSeverity() const noexcept;

                    /**
                     * \brief Gets the descriptive message about the problem
                     *
                     * \return The message
                     */
                    const std::string &getMessage() const noexcept;

                    /**
                     * \brief Gets the SourceLocation which contains the problem
                     *
                     * \return The SourceLocation
                     */
                    const SourceLocation &getLocation() const noexcept;

                private:
                    Severity severity;
                    std::string message;
                    SourceLocation location;
            };

            /**
             * \brief Prints a Severity to a formatted stream for debugging
             *
             * \param[in] os The stream to which to print
             * \param[in] obj The object to print
             * \return \c os
             */
            std::ostream &operator<<(std::ostream &os, Diagnostic::Severity obj) noexcept;

            /**
             * \brief Prints a Diagnostic to a formatted stream for debugging
             *
             * \param[in] os The stream to which to print
             * \param[in] obj The object to print
             * \return \c os
             */
            std::ostream &operator<<(std::ostream &os, const Diagnostic &obj) noexcept;
        }
    }
}

#endif
